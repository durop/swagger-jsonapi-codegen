{{#imports}}
    /// <reference path='{{&.}}' />
{{/imports}}

import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';
import {Observable} from 'rxjs/Observable';
import 'rxjs/add/operator/timeout';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/finally';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/throw';
import {TimeoutError} from 'rxjs/Rx';

export interface IValidationError {
    subject: string;
    message: string;
}

export interface IErrorResponse {
    validationErrors?: IValidationError[];
    headers?: HttpHeaders;
    ok?: boolean;
    status?: number;
    statusText?: string;
    type?: any;
    url?: string;
    // original body or event
    _body?: any;
    body?: any;

    // php soft error
    code?: number;
    message?: string;
    trace?: any;
    errors?: any;

    isHandled?: boolean;
    isValidationError?: boolean;
    isPermissionDenied?: boolean;
    isLocked?: boolean;
    isServiceUnavailable?: boolean;
    isUnknownError?: boolean;
    isNotFound?: boolean;
    isThrottleBlocked?: boolean;
    isTimeoutError?: boolean;

    setHandled?: () => void;
}

export class ErrorResponse implements IErrorResponse {

    validationErrors?: IValidationError[] = [];
    headers?: HttpHeaders = null;
    ok?: boolean = false;
    status?: number = -1;
    statusText?: string = '';
    type?: any = 'Error';
    url?: string = '';
    _body?: any = null;
    body?: any = null;

    // php soft error
    code?: number = -1;
    message?: string = '';
    trace?: any = null;
    errors?: any = null;

    isHandled?: boolean = false;
    isValidationError?: boolean = false;
    isPermissionDenied?: boolean = false;
    isLocked?: boolean = false;
    isServiceUnavailable?: boolean = false;
    isNotFound?: boolean = false;
    isUnknownError?: boolean = true;
    isThrottleBlocked?: boolean = false;
    isTimeoutError?: boolean = false;

    constructor(errorResponse?: IErrorResponse) {

        if (errorResponse === 'ERR_TIMEOUT') {
            this.isTimeoutError = true;
            return;
        }

        this._body = errorResponse._body;
        this._parseBody();

        this.headers = errorResponse.headers;
        this.ok = errorResponse.ok;
        this.status = errorResponse.status;
        this.statusText = errorResponse.statusText;
        this.type = errorResponse.type;
        this.url = errorResponse.url;

        // php soft error
        this.code = errorResponse.code;
        this.message = errorResponse.message;

        if (errorResponse.trace) {
            this.trace = true;
        }

        this.errors = errorResponse.errors;
        this._handleStatus();
    }

    private _parseBody() {
        // TODO: Implement string check.
        if (this._body && typeof(this._body) === 'string') {
            try {
                this.body = JSON.parse(this._body);
            } catch(e) {} // forget because body is no JSON in this case
        }
    }

    private _processValidationErrors() {
        if (this.body && (!this.body.errors || (this.body.errors && this.body.errors.length === 0))) {
            for (let fieldName in this.body) {
                if (this.body.hasOwnProperty(fieldName)
                    && this.body[fieldName]
                    && typeof this.body[fieldName] === 'string'
                    && this.body[fieldName].length > 0) {

                        this.validationErrors.push({
                            subject: fieldName,
                            message: this.body[fieldName]
                        });
                }
            }
        }

        if (this.body && this.body.errors) {
            for (let fieldName in this.body.errors) {
                if (this.body.errors.hasOwnProperty(fieldName)
                    && this.body.errors[fieldName]
                    && this.body.errors[fieldName][0]) {

                    this.validationErrors.push({
                        subject: fieldName,
                        message: this.body.errors[fieldName][0]
                    });
                }
            }
        }

        if (this.errors) {
            for (let errorKey in this.errors) {
                if (this.errors.hasOwnProperty(errorKey)) {

                    this.validationErrors.push({
                        subject: errorKey,
                        message: this.errors[errorKey]
                    });
                }
            }
        }

        // fallback to simple error message; only if no other validation errors can be found
        if (this.message && this.validationErrors.length == 0) {
            this.validationErrors.push({
                subject: 'general-error-message',
                message: this.message
            });
        }
    }

// TODO format code below
private _handleStatus() {

// if code is defined, status is not (because it's a php-level error)
switch (this.status || this.code) {

// unprocessable entity, validation failed server-side
case 0:
case 422:
this.isUnknownError = false;
this.isValidationError = true;
this._processValidationErrors();
break;

// not found
case 404:
this.isUnknownError = false;
this.isNotFound = true;
break;

// throttling
case 429:
this.isUnknownError = false;
this.isThrottleBlocked = true;
break;

// forbidden
case 403:
this.isUnknownError = false;
this.isPermissionDenied = true;
break;

// locked
case 423:
this.isUnknownError = false;
this.isLocked = true;
break;

// service unavailable
case 503:
this.isUnknownError = false;
this.isServiceUnavailable = true;
break;
}
}

setHandled() {
this.isHandled = true;
}
}

export interface IAbstractResponse {

// --- LOGIN response, not following api standards
token?: string;


// --- Laravel ERROR response
code?: number;
message?: string;
errors?: any;
trace?: any;


// --- JSON-API data structure
meta?: {
copyright?: string;
authors?: string[];
version?: string;
};

links?: {
self?: string;
first?: string;
};

data?: any;
included?: any;
}

export interface IAbstractResponseData {

type?: string;
id?: number;
attributes?: any;
relationships?: any;
links?: {
self?: string;
}
}

export class IAbstractApiResponse<R extends IAbstractResponse, D> {

    constructor(private response: R) {
    }

    setResponseData(response: R) {
    this.response = response;
    }

    getResponseData() : R {
    return this.response;
    }


    getData(): D[] {

    let data: D[] = [];

    if (this.response && this.response.data) {

    let dataRecord: IAbstractResponseData = this.response.data;

    let dataItem = dataRecord.attributes;

    // map id
    dataItem.id = dataRecord.id;

    // Fetch dataRecord.relationships, collect this.response.included and map
    // onto dataRecord.attributes[modelName + 's'] as array of data objects
    if (dataRecord.relationships && this.response.included) {

    let relationshipMapper = (dataRecord: any, dataItem: any) => {

    for (let key in dataRecord.relationships) {

    if (dataRecord.relationships.hasOwnProperty(key)) {

    if (dataRecord.relationships[key].data && dataRecord.relationships[key].data.length) {

    // multi
    for (let i = 0; i < dataRecord.relationships[key].data.length; i++) {

    // {id: number; type: string;}
    let relation = dataRecord.relationships[key].data[i];

    this.response.included.forEach((relationDataRecord: IAbstractResponseData) => {

    let relBaseName = relationDataRecord.type.replace(dataRecord.type, '').toLowerCase();

    if (relation.id == relationDataRecord.id &&
    relation.type == relationDataRecord.type) {

    let relName = relBaseName + 's';

    if (!dataItem[relName]) {
    dataItem[relName] = [];
    }
    let relationDataItem = relationDataRecord.attributes;

    // map id
    relationDataItem.id = relationDataRecord.id;

    if (relationDataRecord.relationships) {

    // go recursive
    relationDataItem = relationshipMapper(relationDataRecord, relationDataItem);
    }
    dataItem[relName].push(relationDataItem);
    }
    });
    }

    } else if (dataRecord.relationships[key].data) {

    // single
    let relation = dataRecord.relationships[key].data;

    this.response.included.forEach((relationDataRecord: IAbstractResponseData) => {

    let relBaseName = relationDataRecord.type.replace(dataRecord.type, '').toLowerCase();

    if (relation.id == relationDataRecord.id &&
    relation.type == relationDataRecord.type) {

    let relName = relBaseName;

    if (!dataItem[relName]) {
    dataItem[relName] = [];
    }

    let relationDataItem = relationDataRecord.attributes;

    // map id
    relationDataItem.id = relationDataRecord.id;

    if (relationDataRecord.relationships) {

    // go recursive
    relationDataItem = relationshipMapper(relationDataRecord, relationDataItem);
    }
    dataItem[relName] = relationDataItem;
    }
    });
    }
    }
    }
    return dataItem;
    };

    dataItem = relationshipMapper(dataRecord, dataItem);
    }

    data.push(dataItem);
    }
    return data;
    }
    }


    export type CallbackHandler = (errorResponse?: ErrorResponse) => void;
    export type RequestHook = () => boolean;

    {{#definitions}}

        {{#isModel}}
            export interface I{{&modelPlainName}} {{#tsType}}{{> type}}{{/tsType}}

            export interface I{{&modelRawName}} extends I{{&modelPlainName}} {

            {{#hasIncluded}}

                {{#includedRelations}}
                    {{&includeKey}}?: {{&includeTypeDef}}
                {{/includedRelations}}

            {{/hasIncluded}}
            }

            export interface I{{&modelPlainName}}ResponseData extends IAbstractResponseData {

            attributes?: I{{&modelPlainName}}[];

            }

            export interface I{{&modelPlainName}}Response extends IAbstractResponse {

            data: I{{&modelPlainName}}ResponseData[];

            {{#hasIncluded}}
                included?: {{&includedTypeDef}};
            {{/hasIncluded}}
            }

            export class I{{&modelRawName}}Response <R extends I{{&modelPlainName}}Response, D extends I{{&modelRawName}}> extends IAbstractApiResponse<R, D> {

            }

        {{/isModel}}
    {{/definitions}}

    {{#enumerations}}
        export enum {{tsType}} {

        {{#enum}}{{.}} = '{{.}}',{{/enum}}
        }
    {{/enumerations}}

    /**
    * {{&description}}
    * @class {{&className}}
    * @param {(string)} [domainOrOptions] - The project domain.
    */
    @Injectable()
    export class {{&className}} {

    private domain: string = '{{&domain}}';
    public authorizationToken : string;
    public generalErrorHandler: CallbackHandler = () => {};
    public requestHook: RequestHook = (): boolean => { return true };
    private userId : number;
    private loginExpirationTime : number;
    private timeout: number;

    constructor(protected http: HttpClient) {
    }

    setAuthorizationToken(authorizationToken : string) {

    this.authorizationToken = authorizationToken;

    // let tokenPayload = jwtDecode(this.authorizationToken);

    // this.userId =  (<any>tokenPayload).sub;
        // this.loginExpirationTime = (<any>tokenPayload).exp;
            }

            /**
            * @param timeout In seconds
            */
            setTimeout(timeout: number) {
            this.timeout = timeout * 1000;
            }

            getUserId() {
            return this.userId;
            }

            getLoginExpirationTime() {
            return this.loginExpirationTime;
            }

            getDomain() {
            return this.domain;
            }

            setGeneralErrorHandler(handler: CallbackHandler) {
            this.generalErrorHandler = handler;
            }

            setRequestHook(handler: RequestHook) {
            this.requestHook = handler;
            }

            private request(method: string, url: string, queryStringParameters: any, json: any, form: any, headers: any, isResponseText: boolean) : Observable<Object> {

                if (!this.requestHook()) {
                return;
                }

                let bodyData : any;
                let headerData : HttpHeaders = new HttpHeaders();
                let requestOptions : {};
                let queryStringKeys : any;
                let queryString : string;

                // add JWT token if existing
                if (this.authorizationToken) {
                headers['Authorization'] = `Bearer ${this.authorizationToken}`;
                }

                Object.keys(headers).forEach(headerName => {
                headerData = headerData.append(headerName, headers[headerName]);
                });

                if (queryStringParameters) {
                queryStringKeys = Object.keys(queryStringParameters);
                queryString = (queryStringKeys.length > 0 ? '?' + (queryStringKeys.map((key : string) => key + '=' + encodeURIComponent(queryStringParameters[key])).join('&')): '');

                url += queryString;
                }

                if (json) {
                headerData = headerData.append('Content-Type', 'application/json');
                bodyData = JSON.stringify(json);
                }else if (form) {
                bodyData = new FormData();

                Object.keys(form).forEach(paramName => {
                bodyData.append(paramName, form[paramName]);
                });
                }

                // pack request options
                requestOptions = {
                headers: headerData
                };
                if (isResponseText) {
                requestOptions['responseType'] = 'text';
                }

                let requestObserve: Observable<Object>;

                    switch (method) {

                    case 'POST':
                    requestObserve = this.http.post(url, bodyData, requestOptions);
                    break;

                    case 'PUT':
                    requestObserve = this.http.put(url, bodyData, requestOptions);
                    break;

                    case 'PATCH':
                    requestObserve = this.http.patch(url, bodyData, requestOptions);
                    break;

                    case 'DELETE':
                    requestObserve = this.http.delete(url, requestOptions);
                    break;

                    case 'GET':
                    default:
                    requestObserve = this.http.get(url, requestOptions);
                    }
                    return requestObserve;
                    }

                    {{#methods}}
                        {{> method}}

                    {{/methods}}
                    }
