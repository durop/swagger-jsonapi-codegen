/**
* {{&summary}}
* @method
{{#externalDocs}}
    * @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
{{&methodName}}(parameters: {
{{#parameters}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/parameters}}
},
queryStringParameters?: any,
headers?: any,
domain?: string

): Observable<Object> {

    let requestDomain : string = domain || this.domain;
    headers = headers || {};
    queryStringParameters = queryStringParameters || {};

    let path : string = '{{&path}}';
    let url : string;
    let json : any = {};
    let form : any = null;

    {{#headers}}
        headers['{{&name}}'] = {{&value}};
    {{/headers}}

    {{#parameters}}

        {{#isQueryParameter}}

            {{#isSingleton}}
                queryStringParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                    queryStringParameters[parameterName] = parameters[parameterName];
                    }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                    if(parameters['{{&camelCaseName}}'] !== undefined) {
                    queryStringParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                    }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}

        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&camelCaseName}}']}`);
        {{/isPathParameter}}

        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined) {
                headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}

        {{#isBodyParameter}}
            if(parameters['{{&camelCaseName}}'] !== undefined) {
            json['{{&camelCaseName}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isBodyParameter}}

        {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined) {
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isFormParameter}}

    {{/parameters}}

    // concat path
    url = requestDomain + path;

    return this.request('{{method}}', url, queryStringParameters, json, form, headers);

    };
